import Head from 'next/head'

import { Card } from '@/components/Card'
import { Section } from '@/components/Section'
import { SimpleLayout } from '@/components/SimpleLayout'

function ToolsSection({ children, ...props }) {
  return (
    <Section {...props}>
      <ul role="list" className="space-y-16">
        {children}
      </ul>
    </Section>
  )
}

function Tool({ title, href, children }) {
  return (
    <Card as="li">
      <Card.Title as="h3" href={href}>
        {title}
      </Card.Title>
      <Card.Description>{children}</Card.Description>
    </Card>
  )
}

export default function Uses() {
  return (
    <>
      <Head>
        <title>Lasercats - technologies</title>
        <meta
          name="description"
          content="Les technologies que nous utilisons."
        />
      </Head>
      <SimpleLayout
        title="Les technologies que nous utilisons"
        intro="Impossible de les pr√©senter toutes : chaque projet am√®ne sont lot de nouveaut√©s, chaque client ses sp√©cificit√©s. Voici quand m√™me une pr√©sentation de nos technologies de pr√©dilection.  D√®s la phase de devis, nous nous mettrons d'accord avec vous sur les technologies, en prenant le temps de peser le pour et le contre. "
      >
        <div className="space-y-20">


          <ToolsSection title="Front-end">
            <Tool title="React">
              Dans le collectif, c&apos;est le framework natif de nos front-end. On l&apos;utilise pour les dashboard/CRM, et d√©sormais presque toujours avec le framework NextJS.
            </Tool>
            <Tool title="React-Native + X-code">
              Pour les apps mobile, c&apos;est une base de laquelle on n&apos;a pas boug√©. Par contre, pour shipper correctement les app sur l&apos;Apple store, il a fallu monter en comp√©tence dans l&apos;environnement dev&apos; d&apos;Apple. Deux de nos dev&apos; ont leur license chez Apple, des notions de swift et une bonne connaissance de X-Code. Pour assurer la livraison finale de vos apps.
            </Tool>
            <Tool title="NextJS">
              Certains √©taient pass√©s par Gatsby.js. Mais c&apos;est le framework NextJS qui est devenu incontournable chez nous. Il nous a permis d&apos;acc√©l√©rer certaines de nos apps en scindant les rendus c√¥t√© client / c√¥t√© serveur, am√©liorer consid√©rablement la SEO en servant des pages statiques, optimiser la gestion des images. Chouchou des frontistes.
            </Tool>
            <Tool title="ERB (Embedded Ruby)">
              Quand la team backend n&apos;a pas envie de s&apos;encombrer d&apos;un front trop lourd et que l&apos;architecture ruby/react n&apos;est pas optimale, du ruby inject√© directement dans le html a un rendu final sans concession.
            </Tool>
            <Tool title="Spip">
              Vous ne trouverez pas de d√©veloppeur PHP ici... mais on a quelque vieilles technos dans nos cartons. SPIP, un syst√®me de publication pour l&apos;Internet cod√© en... fran√ßais. Un langage qui nous a permis d&apos;intervenir sur deux sites de nos clients sans changer leurs habitudes et en √©vitant de les faire passer √† Wordpress.
            </Tool>
            <Tool title="Prismic">
              En parlant de syst√®me de publication ; dans la famille des CMS headless, quand c&apos;est l&apos;architecture jamstack qui l&apos;emporte, on utilise en ce moment Prismic. UI l√©g√®re, simple d&apos;utilisation et son API ne nous a pas encore de√ßu.
            </Tool>
          </ToolsSection>

          <ToolsSection title="Back-end">
            <Tool title="Ruby-on-Rails">
              Toujours l√†, l&apos;ind√©tr√¥nable framework nous sert pour construire nos backends. Base de donn√©es Postgresql, API maison (rest ou graphql), logique m√©tier, connexions √† des API tierces et traitement des donn√©es, voil√† tout ce qu&apos;il nous permet d&apos;accomplir.
            </Tool>
          </ToolsSection>
          {/* <ToolsSection title="BDD">
            <Tool title="Firebase">
              It‚Äôs not the newest kid on the block but it‚Äôs still the fastest.
              The Sublime Text of the application launcher world.
            </Tool>
            <Tool title="SupaBase">
              It‚Äôs not the newest kid on the block but it‚Äôs still the fastest.
              The Sublime Text of the application launcher world.
            </Tool>
          </ToolsSection> */}
          <ToolsSection title="Automation">
            <Tool title="Zapier">
              Il y a des t√¢ches d&apos;automation qui ne m√©ritent pas d&apos;√™tre cod√©es et recod√©es. Quand les API ou la gestion des events le permet, et d&apos;autant plus quand l&apos;int√©gration est g√©r√©e par Zapier, on fait gagner du temps et de l&apos;argent √† tout le monde en se servant de Zapier.
            </Tool>
          </ToolsSection>
          <ToolsSection title="Analytics">
            <Tool title="Plausible">
              Simple, l&apos;interface est minimale, d&apos;un coup d‚Äô≈ìil on comprend les donn√©es essentielles, celles qui nous int√©ressent.
              Fini l&apos;enfer des onglets et sous-onglets de Google Analytics üôÄ, on n&apos;est plus noy√©s dans les informations.
            </Tool>
            <Tool title="GoogleAnalytics">
              Mais quand il faut alimenter un dashboard fait maison pour suivre finement l&apos;activit√© multiplateforme (IOS Android et webapp) de plusieurs milliers d&apos;utilisateurs pour in fine orienter le marketing d&apos;une entreprise... Il faut sortir la grosse artillerie. Et nous ne sommes pas arriv√©s au bout de ce que peut Google en terme de tracking!
            </Tool>
          </ToolsSection>

          <ToolsSection title="Web 3">
            <Tool title="Remix">
              Au d√©but, on ne pensait pas devoir coder du Solidity. Mais travailler sur un smartcontract bugu√© nous a pouss√© √† nous y mettre, et remix a √©t√© notre bac √† sable !
            </Tool>
            <Tool title="Hardhat">
              Du d√©veloppement en local jusqu&apos;au d√©ploiement final, Hardhat
              est un outil extr√™mement flexible et puissant pour d√©velopper des smartcontracts.
            </Tool>
            <Tool title="IPFS">
              Nouvelle mani√®re d&apos;h√©berger et de distribuer de la data, on a fait nos premiers pas avec IPFS sur des projets persos. En attente de projets costauds pour aller plus loin!
            </Tool>
          </ToolsSection>

          <ToolsSection title="Development tools">
            <Tool title="Visual Studio Code">
              Question de go√ªt et de formation. Si le dev&apos; client n√©cessite un tuilage fin dans le code, il est possible de prendre un temps en live-coding avec Visual Studio Live Share.
            </Tool>
          </ToolsSection>
          <ToolsSection title="Design">
            <Tool title="Figma">
              Pour un prototypage rapide, des maquettes dynamiques, des mockups au pixel pr√®s et des retours clients faciles, Figma est l&apos;outil qui convient.
            </Tool>
          </ToolsSection>

          <ToolsSection title="Productivity">
            <Tool title="Notion">
              In√©vitable.
            </Tool>
            {/* <Tool title="Click-up">
              On g√®re nos projets d&apos;ici. Fini les kanbans, Asana ou Trello... Par ce qu&apos;on privil√©gie le travail au TJM, on ne peut se passer d&apos;un outils de suivi du temps de travail.
            </Tool> */}
            <Tool title="Gather">
              Si vous faites encore vos visios sur skype, essayez Gather...
            </Tool>
          </ToolsSection>




        </div>
      </SimpleLayout>
    </>
  )
}
